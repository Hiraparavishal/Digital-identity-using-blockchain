"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides access to the `talk` resource.
 */
var TalkResource = function () {
  _createClass(TalkResource, null, [{
    key: "PATH",

    /**
     * The path to the `talk` resource.
     */
    get: function get() {
      return "/v1/calls/{call_uuid}/talk";
    }

    /**
     * Creates a new TalkResource.
     *
     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.
     * @param {Object} options - additional options for the class.
     */

  }]);

  function TalkResource(creds, options) {
    _classCallCheck(this, TalkResource);

    this.creds = creds;
    this.options = options;
  }

  /**
   * Starts a talk in a call.
   *
   * @param {Object} params - Parameters used when starting the talk. See https://developer.nexmo.com/api/voice#talk for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  _createClass(TalkResource, [{
    key: "start",
    value: function start(callId, params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: TalkResource.PATH.replace("{call_uuid}", callId),
        method: "PUT",
        body: params,
        headers: {
          "Content-Type": "application/json",
          "Content-Length": Buffer.byteLength(params),
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Stop a talk in a call.
     *
     * @param {string} callId - The unique identifier for the call for the talk to be stopped in.
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "stop",
    value: function stop(callId, callback) {
      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: TalkResource.PATH.replace("{call_uuid}", callId),
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }
  }]);

  return TalkResource;
}();

exports.default = TalkResource;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UYWxrUmVzb3VyY2UuanMiXSwibmFtZXMiOlsiVGFsa1Jlc291cmNlIiwiY3JlZHMiLCJvcHRpb25zIiwiY2FsbElkIiwicGFyYW1zIiwiY2FsbGJhY2siLCJKU09OIiwic3RyaW5naWZ5IiwiY29uZmlnIiwiaG9zdCIsImFwaUhvc3QiLCJwYXRoIiwiUEFUSCIsInJlcGxhY2UiLCJtZXRob2QiLCJib2R5IiwiaGVhZGVycyIsIkJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJBdXRob3JpemF0aW9uIiwiZ2VuZXJhdGVKd3QiLCJodHRwQ2xpZW50IiwicmVxdWVzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7SUFHTUEsWTs7OztBQUNKOzs7d0JBR2tCO0FBQ2hCLGFBQU8sNEJBQVA7QUFDRDs7QUFFRDs7Ozs7Ozs7O0FBTUEsd0JBQVlDLEtBQVosRUFBbUJDLE9BQW5CLEVBQTRCO0FBQUE7O0FBQzFCLFNBQUtELEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjtBQUNEOztBQUVEOzs7Ozs7Ozs7OzBCQU1NQyxNLEVBQVFDLE0sRUFBUUMsUSxFQUFVO0FBQzlCRCxlQUFTRSxLQUFLQyxTQUFMLENBQWVILE1BQWYsQ0FBVDs7QUFFQSxVQUFJSSxTQUFTO0FBQ1hDLGNBQU0sS0FBS1AsT0FBTCxDQUFhUSxPQUFiLElBQXdCLGVBRG5CO0FBRVhDLGNBQU1YLGFBQWFZLElBQWIsQ0FBa0JDLE9BQWxCLENBQTBCLGFBQTFCLEVBQXlDVixNQUF6QyxDQUZLO0FBR1hXLGdCQUFRLEtBSEc7QUFJWEMsY0FBTVgsTUFKSztBQUtYWSxpQkFBUztBQUNQLDBCQUFnQixrQkFEVDtBQUVQLDRCQUFrQkMsT0FBT0MsVUFBUCxDQUFrQmQsTUFBbEIsQ0FGWDtBQUdQZSxxQ0FBeUIsS0FBS2xCLEtBQUwsQ0FBV21CLFdBQVg7QUFIbEI7QUFMRSxPQUFiO0FBV0EsV0FBS2xCLE9BQUwsQ0FBYW1CLFVBQWIsQ0FBd0JDLE9BQXhCLENBQWdDZCxNQUFoQyxFQUF3Q0gsUUFBeEM7QUFDRDs7QUFFRDs7Ozs7Ozs7O3lCQU1LRixNLEVBQVFFLFEsRUFBVTtBQUNyQixVQUFJRyxTQUFTO0FBQ1hDLGNBQU0sS0FBS1AsT0FBTCxDQUFhUSxPQUFiLElBQXdCLGVBRG5CO0FBRVhDLGNBQU1YLGFBQWFZLElBQWIsQ0FBa0JDLE9BQWxCLENBQTBCLGFBQTFCLEVBQXlDVixNQUF6QyxDQUZLO0FBR1hXLGdCQUFRLFFBSEc7QUFJWEUsaUJBQVM7QUFDUCwwQkFBZ0Isa0JBRFQ7QUFFUEcscUNBQXlCLEtBQUtsQixLQUFMLENBQVdtQixXQUFYO0FBRmxCO0FBSkUsT0FBYjtBQVNBLFdBQUtsQixPQUFMLENBQWFtQixVQUFiLENBQXdCQyxPQUF4QixDQUFnQ2QsTUFBaEMsRUFBd0NILFFBQXhDO0FBQ0Q7Ozs7OztrQkFHWUwsWSIsImZpbGUiOiJUYWxrUmVzb3VyY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgYHRhbGtgIHJlc291cmNlLlxuICovXG5jbGFzcyBUYWxrUmVzb3VyY2Uge1xuICAvKipcbiAgICogVGhlIHBhdGggdG8gdGhlIGB0YWxrYCByZXNvdXJjZS5cbiAgICovXG4gIHN0YXRpYyBnZXQgUEFUSCgpIHtcbiAgICByZXR1cm4gXCIvdjEvY2FsbHMve2NhbGxfdXVpZH0vdGFsa1wiO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgVGFsa1Jlc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0NyZWRlbnRpYWxzfSBjcmVkcyAtIENyZWRlbnRpYWxzIHVzZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIHRoZSBOZXhtbyBBUEkuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gYWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgY2xhc3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjcmVkcywgb3B0aW9ucykge1xuICAgIHRoaXMuY3JlZHMgPSBjcmVkcztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyBhIHRhbGsgaW4gYSBjYWxsLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gUGFyYW1ldGVycyB1c2VkIHdoZW4gc3RhcnRpbmcgdGhlIHRhbGsuIFNlZSBodHRwczovL2RldmVsb3Blci5uZXhtby5jb20vYXBpL3ZvaWNlI3RhbGsgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICAgKi9cbiAgc3RhcnQoY2FsbElkLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgcGFyYW1zID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zKTtcblxuICAgIHZhciBjb25maWcgPSB7XG4gICAgICBob3N0OiB0aGlzLm9wdGlvbnMuYXBpSG9zdCB8fCBcImFwaS5uZXhtby5jb21cIixcbiAgICAgIHBhdGg6IFRhbGtSZXNvdXJjZS5QQVRILnJlcGxhY2UoXCJ7Y2FsbF91dWlkfVwiLCBjYWxsSWQpLFxuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgYm9keTogcGFyYW1zLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJDb250ZW50LUxlbmd0aFwiOiBCdWZmZXIuYnl0ZUxlbmd0aChwYXJhbXMpLFxuICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy5jcmVkcy5nZW5lcmF0ZUp3dCgpfWBcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMub3B0aW9ucy5odHRwQ2xpZW50LnJlcXVlc3QoY29uZmlnLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogU3RvcCBhIHRhbGsgaW4gYSBjYWxsLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsbElkIC0gVGhlIHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgY2FsbCBmb3IgdGhlIHRhbGsgdG8gYmUgc3RvcHBlZCBpbi5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMuXG4gICAqL1xuICBzdG9wKGNhbGxJZCwgY2FsbGJhY2spIHtcbiAgICB2YXIgY29uZmlnID0ge1xuICAgICAgaG9zdDogdGhpcy5vcHRpb25zLmFwaUhvc3QgfHwgXCJhcGkubmV4bW8uY29tXCIsXG4gICAgICBwYXRoOiBUYWxrUmVzb3VyY2UuUEFUSC5yZXBsYWNlKFwie2NhbGxfdXVpZH1cIiwgY2FsbElkKSxcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLmNyZWRzLmdlbmVyYXRlSnd0KCl9YFxuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChjb25maWcsIGNhbGxiYWNrKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUYWxrUmVzb3VyY2U7XG4iXX0=