"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _querystring = require("querystring");

var _querystring2 = _interopRequireDefault(_querystring);

var _StreamResource = require("./StreamResource");

var _StreamResource2 = _interopRequireDefault(_StreamResource);

var _TalkResource = require("./TalkResource");

var _TalkResource2 = _interopRequireDefault(_TalkResource);

var _DtmfResource = require("./DtmfResource");

var _DtmfResource2 = _interopRequireDefault(_DtmfResource);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides access to the `calls` resource.
 */
var CallsResource = function () {
  _createClass(CallsResource, null, [{
    key: "PATH",

    /**
     * The path to the `calls` resource.
     */
    get: function get() {
      return "/v1/calls";
    }

    /**
     * Creates a new CallsResource.
     *
     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.
     * @param {Object} options - additional options for the class.
     */

  }]);

  function CallsResource(creds, options) {
    _classCallCheck(this, CallsResource);

    this.creds = creds;
    this.options = options;

    /**
     * @type StreamController
     */
    this.stream = new _StreamResource2.default(this.creds, this.options);

    /**
     * @type TalkResource
     */
    this.talk = new _TalkResource2.default(this.creds, this.options);

    /**
     * @type DtmfResource
     */
    this.dtmf = new _DtmfResource2.default(this.creds, this.options);
  }

  /**
   * Create a new call.
   *
   * @param {Object} params - Parameters used when creating the call. See https://developer.nexmo.com/api/voice#create-an-outbound-call for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  _createClass(CallsResource, [{
    key: "create",
    value: function create(params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: CallsResource.PATH,
        method: "POST",
        body: params,
        headers: {
          "Content-Type": "application/json",
          "Content-Length": Buffer.byteLength(params),
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Get an existing call.
     *
     * @param {string|object} query - The unique identifier for the call to retrieve
     *               or a set of filter parameters for the query. For more information
     *               see https://docs.nexmo.com/voice/voice-api/api-reference#call_retrieve
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "get",
    value: function get(query, callback) {
      if (!query) {
        throw new Error('"query" is a required parameter');
      }

      var pathExt = "";
      if (typeof query === "string") {
        // single call Id
        pathExt = "/" + query;
      } else if ((typeof query === "undefined" ? "undefined" : _typeof(query)) === "object" && Object.keys(query).length > 0) {
        // filter
        pathExt = "?" + _querystring2.default.stringify(query);
      }

      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: "" + CallsResource.PATH + pathExt,
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Update an existing call.
     *
     * @param {string} [callId] - The unique identifier for the call to update.
     * @param {Object} params - Parameters used when updating the call. See https://developer.nexmo.com/api/voice#modify-an-existing-call for more information.
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "update",
    value: function update(callId, params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: this.options.apiHost || "api.nexmo.com",
        path: CallsResource.PATH + "/" + callId,
        method: "PUT",
        body: params,
        headers: {
          "Content-Type": "application/json",
          "Content-Length": Buffer.byteLength(params),
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }
  }]);

  return CallsResource;
}();

exports.default = CallsResource;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,