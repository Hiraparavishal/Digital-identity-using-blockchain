"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require("./index");

var _index2 = _interopRequireDefault(_index);

var _Utils = require("./Utils");

var _Utils2 = _interopRequireDefault(_Utils);

var _Members = require("./Members");

var _Members2 = _interopRequireDefault(_Members);

var _Events = require("./Events");

var _Events2 = _interopRequireDefault(_Events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides access to the `conversations` endpoint.
 */
var Conversations = function () {
  _createClass(Conversations, null, [{
    key: "PATH",
    get: function get() {
      return "/v0.1/conversations";
    }
  }, {
    key: "V1_PATH",
    get: function get() {
      return "/v1/conversations";
    }

    /**
     * @param {Credentials} credentials
     *    credentials to be used when interacting with the API.
     * @param {Object} options
     *    Additional Conversations options.
     */

  }]);

  function Conversations(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Conversations);

    this.creds = credentials;
    this.options = options;

    /**
     * @type Members
     */
    this.members = new _Members2.default(this.creds, this.options);

    /**
     * @type Events
     */
    this.events = new _Events2.default(this.creds, this.options);
  }

  /**
   * Create a new conversation.
   *
   * @param {Object} params - Parameters used when creating the conversation. See https://ea.developer.nexmo.com/api/conversation#create-a-conversation for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  _createClass(Conversations, [{
    key: "create",
    value: function create(params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: this.options.host || "api.nexmo.com",
        path: Conversations.PATH,
        method: "POST",
        body: params,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Get an existing conversation.
     *
     * @param {string|object} query - The unique identifier for the conversation to retrieve
     *               or a set of filter parameters for the query. For more information
     *               see https://ea.developer.nexmo.com/api/conversation#retrieve-a-conversation
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "get",
    value: function get(query, callback) {
      var config = {
        host: this.options.host || "api.nexmo.com",
        path: typeof query === "string" ? Conversations.PATH + "/" + query : _Utils2.default.createPathWithQuery(Conversations.PATH, query),
        method: "GET",
        body: undefined,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }

    /**
     * Get next page of conversations.
     *
     * @param {object} response - The response from a paginated conversations list
     *               see https://ea.developer.nexmo.com/api/conversation#listConversations
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "next",
    value: function next(response, callback) {
      if (response._links.next) {
        this.get(_Utils2.default.getQuery(response._links.next.href), callback);
      } else {
        var error = new Error("The response doesn't have a next page.");
        callback(error, null);
      }
    }

    /**
     * Get previous page of conversations.
     *
     * @param {object} response - The response from a paginated conversations list
     *               see https://ea.developer.nexmo.com/api/conversation#listConversations
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "prev",
    value: function prev(response, callback) {
      if (response._links.prev) {
        this.get(_Utils2.default.getQuery(response._links.prev.href), callback);
      } else {
        var error = new Error("The response doesn't have a previous page.");
        callback(error, null);
      }
    }

    /**
     * Update an existing conversation.
     *
     * @param {string} conversationId - The unique identifier for the conversation to update.
     * @param {Object} params - Parameters used when updating the conversation.
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "update",
    value: function update(conversationId, params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: this.options.host || "api.nexmo.com",
        path: Conversations.PATH + "/" + conversationId,
        method: "PUT",
        body: params,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };

      this.options.httpClient.request(config, callback);
    }

    /**
     * Record an existing conversation.
     *
     * @param {string} conversationId - The unique identifier for the conversation to record.
     * @param {Object} params - Parameters used when recording the conversation.
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "record",
    value: function record(conversationId, params, callback) {
      params = JSON.stringify(params);

      var config = {
        host: this.options.host || "api.nexmo.com",
        path: Conversations.V1_PATH + "/" + conversationId + "/record",
        method: "PUT",
        body: params,
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };

      this.options.httpClient.request(config, callback);
    }

    /**
     * Deleta an existing conversation.
     *
     * @param {string} conversationId - The unique identifier for the conversation to delete.
     * @param {function} callback - function to be called when the request completes.
     */

  }, {
    key: "delete",
    value: function _delete(conversationId, callback) {
      var config = {
        host: this.options.host || "api.nexmo.com",
        path: Conversations.PATH + "/" + conversationId,
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
          Authorization: "Bearer " + this.creds.generateJwt()
        }
      };

      this.options.httpClient.request(config, callback);
    }
  }]);

  return Conversations;
}();

exports.default = Conversations;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,